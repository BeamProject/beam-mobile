// Mocks generated by Mockito 5.0.7 from annotations
// in beam/features/domain/repositories/testing/repository_module.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:beam/features/domain/entities/payment.dart' as _i6;
import 'package:beam/features/domain/entities/payment_request.dart' as _i5;
import 'package:beam/features/domain/entities/payment_result.dart' as _i4;
import 'package:beam/features/domain/repositories/payment_repository.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

// ignore_for_file: prefer_const_constructors

// ignore_for_file: avoid_redundant_argument_values

/// A class which mocks [PaymentRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPaymentRepository extends _i1.Mock implements _i2.PaymentRepository {
  MockPaymentRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.PaymentResult> makeDelayedPayment(
          _i5.PaymentRequest? paymentRequest) =>
      (super.noSuchMethod(
              Invocation.method(#makeDelayedPayment, [paymentRequest]),
              returnValue:
                  Future<_i4.PaymentResult>.value(_i4.PaymentResult.SUCCESS))
          as _i3.Future<_i4.PaymentResult>);
  @override
  _i3.Stream<List<_i6.Payment>> getPayments(String? userId) =>
      (super.noSuchMethod(Invocation.method(#getPayments, [userId]),
              returnValue: Stream<List<_i6.Payment>>.empty())
          as _i3.Stream<List<_i6.Payment>>);
  @override
  _i3.Stream<List<_i6.Payment>> getPaymentsBetween(
          String? userId, DateTime? from, DateTime? to) =>
      (super.noSuchMethod(
              Invocation.method(#getPaymentsBetween, [userId, from, to]),
              returnValue: Stream<List<_i6.Payment>>.empty())
          as _i3.Stream<List<_i6.Payment>>);
}
